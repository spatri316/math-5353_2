// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyApp;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FinalProject.Migrations
{
    [DbContext(typeof(FinancialContext))]
    partial class FinancialContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MyApp.Exchange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Exchanges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Chicago Mercantile Exchange",
                            ShortCode = "CME"
                        });
                });

            modelBuilder.Entity("MyApp.Instrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Instruments");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Symbol = "CN2023"
                        },
                        new
                        {
                            Id = 4,
                            Symbol = "CK2023"
                        });
                });

            modelBuilder.Entity("MyApp.Market", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Curve")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("integer");

                    b.Property<double>("Multiplier")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RateCurveId")
                        .HasColumnType("integer");

                    b.Property<double>("Size")
                        .HasColumnType("double precision");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer");

                    b.Property<int?>("units_obId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExchangeId");

                    b.HasIndex("RateCurveId");

                    b.HasIndex("units_obId");

                    b.ToTable("Markets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Curve = "US Treasury Curve",
                            Exchange = "CME",
                            ExchangeId = 1,
                            Multiplier = 100.0,
                            Name = "CBOT Corn",
                            RateCurveId = 1,
                            Size = 5000.0,
                            Symbol = "C",
                            Unit = "Bushels",
                            UnitId = 1
                        });
                });

            modelBuilder.Entity("MyApp.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InstSymbolId")
                        .HasColumnType("integer");

                    b.Property<string>("InstSymbolName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("PriceNum")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("InstSymbolId");

                    b.ToTable("Prices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTimeOffset(new DateTime(2022, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            InstSymbolId = 1,
                            InstSymbolName = "CN2023",
                            PriceNum = 75.75
                        });
                });

            modelBuilder.Entity("MyApp.Rate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CurveName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RateCurveId")
                        .HasColumnType("integer");

                    b.Property<double>("Tenor")
                        .HasColumnType("double precision");

                    b.Property<double>("rate")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("RateCurveId");

                    b.ToTable("Rates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CurveName = "Treasury",
                            RateCurveId = 1,
                            Tenor = 3.0,
                            rate = 0.050000000000000003
                        });
                });

            modelBuilder.Entity("MyApp.RateCurve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Curves");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "US Treasury Curve"
                        });
                });

            modelBuilder.Entity("MyApp.Trade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<int>("SymbolId")
                        .HasColumnType("integer");

                    b.Property<string>("SymbolName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SymbolId");

                    b.ToTable("Trades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTimeOffset(new DateTime(2022, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Price = 30.0,
                            Quantity = 1.5,
                            SymbolId = 1,
                            SymbolName = "CH2023"
                        });
                });

            modelBuilder.Entity("MyApp.Units", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bushels"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Gallons"
                        });
                });

            modelBuilder.Entity("MyApp.Derivative", b =>
                {
                    b.HasBaseType("MyApp.Instrument");

                    b.Property<string>("BarrierLevel")
                        .HasColumnType("text");

                    b.Property<string>("BarrierType")
                        .HasColumnType("text");

                    b.Property<string>("Call_Put")
                        .HasColumnType("text");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InstType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Market")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MarketId")
                        .HasColumnType("integer");

                    b.Property<string>("Payout")
                        .HasColumnType("text");

                    b.Property<double?>("Strike")
                        .HasColumnType("double precision");

                    b.Property<string>("Underlying")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UnderlyingId")
                        .HasColumnType("integer");

                    b.Property<int>("UnderlyingMonth")
                        .HasColumnType("integer");

                    b.Property<int>("UnderlyingYear")
                        .HasColumnType("integer");

                    b.HasIndex("MarketId");

                    b.HasIndex("UnderlyingId");

                    b.ToTable("Derivatives");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Symbol = "CK2023",
                            Call_Put = "Call",
                            Expiration = new DateTime(2022, 11, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            InstType = "EuropeanOption",
                            Market = "CBOT Corn",
                            MarketId = 1,
                            Strike = 740.0,
                            Underlying = "CN2023",
                            UnderlyingId = 1,
                            UnderlyingMonth = 12,
                            UnderlyingYear = 2023
                        });
                });

            modelBuilder.Entity("MyApp.Underlying", b =>
                {
                    b.HasBaseType("MyApp.Instrument");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Market")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MarketId")
                        .HasColumnType("integer");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasIndex("MarketId");

                    b.ToTable("Underlyings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Symbol = "CN2023",
                            Expiration = new DateTime(2022, 11, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            Market = "CBOT Corn",
                            MarketId = 1,
                            Month = 12,
                            Year = 2020
                        });
                });

            modelBuilder.Entity("MyApp.Market", b =>
                {
                    b.HasOne("MyApp.Exchange", "exchange_ob")
                        .WithMany()
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyApp.RateCurve", "curve_ob")
                        .WithMany()
                        .HasForeignKey("RateCurveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyApp.Units", "units_ob")
                        .WithMany()
                        .HasForeignKey("units_obId");

                    b.Navigation("curve_ob");

                    b.Navigation("exchange_ob");

                    b.Navigation("units_ob");
                });

            modelBuilder.Entity("MyApp.Price", b =>
                {
                    b.HasOne("MyApp.Instrument", "instsymbol")
                        .WithMany()
                        .HasForeignKey("InstSymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("instsymbol");
                });

            modelBuilder.Entity("MyApp.Rate", b =>
                {
                    b.HasOne("MyApp.RateCurve", "curve")
                        .WithMany()
                        .HasForeignKey("RateCurveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("curve");
                });

            modelBuilder.Entity("MyApp.Trade", b =>
                {
                    b.HasOne("MyApp.Instrument", "symbol")
                        .WithMany()
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("symbol");
                });

            modelBuilder.Entity("MyApp.Derivative", b =>
                {
                    b.HasOne("MyApp.Instrument", null)
                        .WithOne()
                        .HasForeignKey("MyApp.Derivative", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyApp.Market", "market_ob")
                        .WithMany()
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyApp.Underlying", "underlying_ob")
                        .WithMany()
                        .HasForeignKey("UnderlyingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("market_ob");

                    b.Navigation("underlying_ob");
                });

            modelBuilder.Entity("MyApp.Underlying", b =>
                {
                    b.HasOne("MyApp.Instrument", null)
                        .WithOne()
                        .HasForeignKey("MyApp.Underlying", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyApp.Market", "market_ob")
                        .WithMany()
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("market_ob");
                });
#pragma warning restore 612, 618
        }
    }
}
